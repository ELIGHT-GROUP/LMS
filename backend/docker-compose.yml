version: "3.9"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lms_postgres
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASS:-postgres}
      POSTGRES_DB: ${PG_DB:-lms_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lms_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # LMS Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lms_backend
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_TYPE: postgres
      PG_HOST: postgres
      PG_USER: ${PG_USER:-postgres}
      PG_PASS: ${PG_PASS:-postgres}
      PG_DB: ${PG_DB:-lms_db}
      PG_PORT: 5432
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: lms_network
    driver: bridge
